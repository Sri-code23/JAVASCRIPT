<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raining Letters</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="raining-letters-container">
        <h1 id="scrambled-title">RAINING LETTERS</h1>
    </div>
    <script src="script.js"></script>
</body>
</html>

--------

body,
html {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

#raining-letters-container {
  position: relative;
  width: 100%;
  height: 100vh;
  background-color: black;
  overflow: hidden;
}

#scrambled-title {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 20;
  color: white;
  font-size: 3rem;
  font-weight: bold;
  font-family: monospace;
  letter-spacing: 0.1em;
  text-align: center;
}

.raining-char {
  position: absolute;
  font-size: 1.8rem;
  transition: color 0.1s, transform 0.1s, text-shadow 0.1s;
  will-change: transform, top;
}

.raining-char.active {
  color: #00ff00;
  transform: translate(-50%, -50%) scale(1.25);
  text-shadow: 0 0 8px rgba(255, 255, 255, 0.8), 0 0 12px rgba(255, 255, 255, 0.4);
  opacity: 1;
  z-index: 10;
  font-weight: bold;
  animation: pulse 1s infinite;
}

.raining-char:not(.active) {
  color: #4a4a4a;
  transform: translate(-50%, -50%) scale(1);
  opacity: 0.4;
  font-weight: normal;
}

@keyframes pulse {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}

.dud {
  color: #0f0;
  opacity: 0.7;
}



---------

class TextScramble {
  constructor(el) {
    this.el = el
    this.chars = "!<>-_\\/[]{}â€”=+*^?#"
    this.update = this.update.bind(this)
  }

  setText(newText) {
    const oldText = this.el.innerText
    const length = Math.max(oldText.length, newText.length)
    const promise = new Promise((resolve) => (this.resolve = resolve))
    this.queue = []

    for (let i = 0; i < length; i++) {
      const from = oldText[i] || ""
      const to = newText[i] || ""
      const start = Math.floor(Math.random() * 40)
      const end = start + Math.floor(Math.random() * 40)
      this.queue.push({ from, to, start, end })
    }

    cancelAnimationFrame(this.frameRequest)
    this.frame = 0
    this.update()
    return promise
  }

  update() {
    let output = ""
    let complete = 0

    for (let i = 0, n = this.queue.length; i < n; i++) {
      let { from, to, start, end, char } = this.queue[i]
      if (this.frame >= end) {
        complete++
        output += to
      } else if (this.frame >= start) {
        if (!char || Math.random() < 0.28) {
          char = this.chars[Math.floor(Math.random() * this.chars.length)]
          this.queue[i].char = char
        }
        output += `<span class="dud">${char}</span>`
      } else {
        output += from
      }
    }

    this.el.innerHTML = output
    if (complete === this.queue.length) {
      this.resolve()
    } else {
      this.frameRequest = requestAnimationFrame(this.update)
      this.frame++
    }
  }
}

class RainingLetters {
  constructor() {
    this.container = document.getElementById("raining-letters-container")
    this.titleElement = document.getElementById("scrambled-title")
    this.characters = []
    this.activeIndices = new Set()
    this.createCharacters()
    this.animateCharacters()
    this.flickerCharacters()
    this.initScrambledTitle()
  }

  createCharacters() {
    const allChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?"
    const charCount = 300

    for (let i = 0; i < charCount; i++) {
      const char = document.createElement("span")
      char.className = "raining-char"
      char.textContent = allChars[Math.floor(Math.random() * allChars.length)]
      char.style.left = `${Math.random() * 100}%`
      char.style.top = `${Math.random() * 100}%`
      this.characters.push({
        element: char,
        speed: 0.1 + Math.random() * 0.3,
        y: Number.parseFloat(char.style.top),
      })
      this.container.appendChild(char)
    }
  }

  animateCharacters() {
    const updatePositions = () => {
      this.characters.forEach((char) => {
        char.y += char.speed
        if (char.y >= 100) {
          char.y = -5
          char.element.style.left = `${Math.random() * 100}%`
          char.element.textContent = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?"[
            Math.floor(Math.random() * "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?".length)
          ]
        }
        char.element.style.top = `${char.y}%`
      })
      requestAnimationFrame(updatePositions)
    }
    requestAnimationFrame(updatePositions)
  }

  flickerCharacters() {
    setInterval(() => {
      this.activeIndices.clear()
      const numActive = Math.floor(Math.random() * 3) + 3
      for (let i = 0; i < numActive; i++) {
        this.activeIndices.add(Math.floor(Math.random() * this.characters.length))
      }
      this.characters.forEach((char, index) => {
        if (this.activeIndices.has(index)) {
          char.element.classList.add("active")
        } else {
          char.element.classList.remove("active")
        }
      })
    }, 50)
  }

  initScrambledTitle() {
    const scrambler = new TextScramble(this.titleElement)
    const phrases = [
      "Zuhair,",
      "It's RAINING",
      "with' letters",
      "and alphabets",
      "dont FORGET to bring",
      "your umbrella today",
    ]
    let counter = 0
    const next = () => {
      scrambler.setText(phrases[counter]).then(() => {
        setTimeout(next, 2000)
      })
      counter = (counter + 1) % phrases.length
    }
    next()
  }
}

document.addEventListener("DOMContentLoaded", () => {
  new RainingLetters()
})



